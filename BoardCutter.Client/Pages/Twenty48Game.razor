@page "/Twenty48/{gameId}"
@rendermode InteractiveAuto

@using BoardCutter.Core
@using BoardCutter.Games.Twenty48.Standard
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json
@using BoardCutter.Client
@using BoardCutter.Client.Components.Twenty48

@implements IAsyncDisposable
@attribute [Authorize]

@inject NavigationManager Navigation
@inject IJSRuntime JS


<h3>2048</h3>

@switch (_gameStatus)
{
    case GameStatus.Running:
    case GameStatus.Results:
        <Grid Score="_score"
              Cells="_grid"
              ProcessMove="ProcessMove">
        </Grid>
        break;
    case GameStatus.Complete:
        <div>
            Final score is: @_score
        </div>
        <div>
            <button @onclick="Leave" disabled="@(!IsConnected)">Back to Home</button>
        </div>
        break;
    default:
        <div>Not sure what to do with @_gameStatus</div>
        break;
}


@code {
    [Parameter] public string GameId { get; set; } = string.Empty;

    private HubConnection? _hubConnection;

    public bool IsConnected =>
        _hubConnection?.State == HubConnectionState.Connected;

    private int _score;

    private NumberCell[] _grid = [];

    private int _gridSize = 4;

    private GameStatus _gameStatus = GameStatus.SettingUp;

    private async Task Debug(string message)
    {
        await JS.InvokeAsync<string>("console.log", message);
    }

    private async Task Error(string message)
    {
        await JS.InvokeAsync<string>("console.error", message);
    }


    protected override async Task OnInitializedAsync()
    {
        if (_hubConnection != null || !OperatingSystem.IsBrowser()) return;

        _hubConnection = new HubConnectionBuilder()
             .WithUrl(Navigation.ToAbsoluteUri("/twenty48hub"))
             .Build();

        _hubConnection.On("GoHome", (string message) =>
        {
            if (!string.IsNullOrEmpty(message))
            {
            }

            Navigation.NavigateTo("/");
        });

        _hubConnection.On(Server2048Messages.ErrorMessage, async (string message) =>
        {
            // TODO - Redo error message.
            // Toast(message, Severity.Warning);
            await InvokeAsync(StateHasChanged);
        });

        _hubConnection.On(Server2048Messages.PublicVisible, async (string message) =>
        {
            await Debug($"{Server2048Messages.PublicVisible}: {message}");

            var publicVisible = string.IsNullOrEmpty(message)
                ? null
                : JsonSerializer.Deserialize<PublicVisible>(message);

            if (publicVisible == null)
            {
                await Error("public visible message resolved to null");
                return;
            }

            _score = publicVisible.Score;
            _grid = publicVisible.Cells;
            _gridSize = publicVisible.GridSize;
            _gameStatus = publicVisible.Status;

            await InvokeAsync(StateHasChanged);
        });

        await _hubConnection.StartAsync();
        await _hubConnection.SendAsync(Server2048Messages.InitGame, GameId);
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

    #region Server Outgoing

    private async Task ProcessMove(Direction direction)
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.SendAsync("Move", GameId, direction);
        }
    }

    private async Task Leave()
    {
        if (_hubConnection == null)
        {
            await Error("HubConnection Null");
            return;
        }

        await _hubConnection.SendAsync("LeaveGame", GameId);

        Navigation.NavigateTo("/");
    }

    private async Task Start()
    {
        if (_hubConnection == null)
        {
            await Error("HubConnection Null");
            return;
        }

        await _hubConnection.SendAsync("StartGame", GameId);
    }

    private async Task GridSizeChanged(int gridSize)
    {
        if (_hubConnection == null)
        {
            await Error("HubConnection Null");
            return;
        }

        await _hubConnection.SendAsync("SetupGame", GameId, gridSize);
    }

    #endregion

}