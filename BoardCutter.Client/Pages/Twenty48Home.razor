@page "/2048"
@rendermode InteractiveAuto

@using BoardCutter.Games.Twenty48.Standard
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json

@inject NavigationManager Navigation
@inject IJSRuntime JS
@attribute [Authorize]

<PageTitle>2048</PageTitle>

<h2>2048</h2>
<p>
    <ul>
        <li>Shunt the cells.</li>
        <li>If 2 cells of the same value get shunted together, they merge!</li>
        <li>Can you merge a cell all the way to 2048?</li>
    </ul>
</p>

<button @onclick="Send" class="w-100 btn btn-lg btn-primary" disabled="@(!IsConnected)">New game</button>

@code {
    private HubConnection? _hubConnection;

    public bool IsConnected =>
     _hubConnection?.State == HubConnectionState.Connected;


    private async Task Debug(string message)
    {
        await JS.InvokeAsync<string>("console.log", message);
    }

    private async Task Error(string message)
    {
        await JS.InvokeAsync<string>("console.error", message);
    }

    private async Task Send()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.SendAsync("StartNew");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (_hubConnection != null || !OperatingSystem.IsBrowser()) return;

        _hubConnection = new HubConnectionBuilder()
             .WithUrl(Navigation.ToAbsoluteUri("/twenty48hub"))
             .Build();

        _hubConnection.On("SetPlayerGame", async (string message) => {
                await Debug($"SetPlayerGame: {message}");

                var publicVisible = string.IsNullOrEmpty(message)
                    ? null
                    : JsonSerializer.Deserialize<PublicVisible>(message);

                if (publicVisible == null) return;

                Navigation.NavigateTo($"/Twenty48/{publicVisible.GameId}");

                await InvokeAsync(StateHasChanged);
            });

        await _hubConnection.StartAsync();
        await _hubConnection.SendAsync(Server2048Messages.AckHome, "ping");
    }
}
